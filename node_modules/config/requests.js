var request =  require('request');
var mysql = require('mysql');
/*  if you want to use async module */
var async = require('async');
/*  if you want to use Job scheduler */
var schedule = require('node-schedule');
//DB connection
var connection = mysql.createConnection(
    {
      host     : 'localhost',
      user     : 'root',
      password : '1234',
      database : 'test_DB'
    }
);
connection.connect( function(err){
	try{
		if(err){
			throw err;
		}
	}
	catch (err){
		console.error(err);
	}
});



/********************************************************************************
send message 
parameter -> no_log(index of chat room), time_msg(timestamp when messege sent), 
			 log_from(sender - partner of client), msg(message text), 
			 to_id(receiver's id), device
after write DB, send data to GCM server using json and post method
********************************************************************************/
exports.send = function(no_log, log_from, msg, to_id, from_id, time_msg, device, callback){
	console.log("/send -no_log:"+no_log+",log_from:"+log_from+",msg:"+msg+",to_id:"+to_id+",from_id:"+from_id+",time_msg:"+time_msg+",device:"+device);
	//object for query set
	var data = {
                no_log : no_log,
                no : "",
                log : msg,
                time_message : time_msg,
                log_from : log_from,
                device : device

	};
	var sender_pic="";
	var sender_name="";
	var receiver_pic="";
	var receiver_name="";
	//variable for check log_from;
	var chk_log_from = "";
	
	try{
		/*
			check log_from whether client or partner or not(err)
			and DB connection
			and get Sender's info(pic, name)
		*/
		if(log_from == 'client'){
			var que = "SELECT t0ken FROM mb_partner WHERE id=" + mysql.escape(to_id);
			var que_get_sinfo = "SELECT name FROM mb_client WHERE id=" + mysql.escape(from_id);
			var query_get_sinfo = connection.query(que_get_sinfo, function(err, rows){
				try{
					if(err){
						throw err;
					}
					else if(rows.length == 0){
						callback({'response':"N",'type':"chat","err":"log_from:client => No result of client name"});
					}
					else{
						sender_pic = "http://trost.co.kr/assets/img/of_partner/00000000.png";
						sender_name = rows[0].name;
					}
				}
				catch(err){
					console.error(err);
					callback({'response':"N",'type':"chat","err":"send//log_from=client//DB Error"});
				}
			});
		}
		else if(log_from == 'partner'){
			var que = "SELECT t0ken FROM mb_client WHERE id=" + mysql.escape(to_id);
			var que_get_sinfo = "SELECT name, pic FROM mb_partner WHERE id=" + mysql.escape(from_id);
			var query_get_sinfo = connection.query(que_get_sinfo, function(err, rows){
				try{
					if(err){
						throw err;
					}
					else if(rows.length == 0){
						callback({'response':"N",'type':"chat","err":"log_from:partner => No result of partner name"});
					}
					else{
						sender_pic = rows[0].pic;
						sender_name = rows[0].name;
					}
				}
				catch (err){
					console.error(err);
					callback({'response':"N",'type':"chat","err":"send//log_from=partner//DB Error"});
				}
			});
		}
		else {
			throw {'response':"N",'type':"chat","err":'send//log_from is wrong.'};
		}
		var query = connection.query(que, function(err, rows){
			try{
				if(err){
					throw err;
				}
				else if(rows.length == 0){
					callback({'response':"N", 'type':"chat","err":"send/no result of token"});
				}
				else{
					//get token value
					var token = rows[0].t0ken;
					//get no from DB
					var que_for_no = "SELECT no FROM log_counseling WHERE no_log="+mysql.escape(no_log)+" order by id desc limit 1";
	          			var query_for_no = connection.query(que_for_no, function(err, rows){
		          			try{
		          				if(err){
		          					throw err;
		          				}	
							else if(rows.length == 0){
								callback({'response':"N",'type':"chat","err":"send/no result of no on log_counseling"});
							}
							else{
								data.no = rows[0].no;
								data.no++;
								/*
									write data set on DB(log_counseling)
								*/
								var que_insert_lc = "INSERT INTO log_counseling set ?";
								var query_insert_lc = connection.query(que_insert_lc, data, function(err, rows){
									try{
										if(err){
											throw err;
										}
										else{
											/*
												request to GCM server for push
											*/	
											request(
												{
													method:'POST',
													uri: 'https://gcm-http.googleapis.com/gcm/send',
													headers: {
													'Content-Type': 'application/json;charset=utf-8',
													'Authorization':'key=AIzaSyDYpkGz6fcmPbMzVtWSf-xWWGofQCxIfXA'
													//APIKEY
													},
													body:JSON.stringify({
													"registration_ids" : [token],
													"data" : {
														"log":msg,
														"log_from":log_from,
														"name":sender_name,
														"sender":from_id,
														"pic": sender_pic,
														"no_log":no_log,
														"time_message":time_msg,
														"no":data.no,
														"title":"Title",
														"sound":"default",
														"body":"새로운 메세지가 왔습니다.",
														"type":"chat"
													},
													"notification":{
														title:"Title",
														sound:"default",
														body:"새로운 메세지가 왔습니다.",
													},
													})
													}
													, function (error, response, body) {
														callback({'response':"Y", 'no':data.no, 'time_message':time_msg,'no_log':no_log,'type':"chat"});
												}
											)
										}
									}
									catch (err){
										console.error(err);
										callback({'response':"N",'type':"chat","err":"send/insert log_counseling error"});
									}
								});
							}
		          			}
		          			catch (err){
		          				console.error(err);
		          				callback({'response':"N",'type':"chat","err":"send/select no error"});
		          			}
		          		});	
				}
			}
			catch (err){
				console.error(err);
				callback({'response':"N",'type':"chat","err":"send/select token error"})
			}
		});
	}
	catch(err){
		callback(err);
	}
	/**************************************
		async
	**************************************/
	/*
	async.waterfall(
	[
		function(callback_async){
			if(log_from == 'client'){
				var que = "SELECT t0ken FROM mb_partner WHERE id=" + mysql.escape(to_id);
				var que_get_sinfo = "SELECT name FROM mb_client WHERE id=" + mysql.escape(from_id);
				callback_async(null, que, que_get_sinfo, 'C', callback_async);
			}
			else if(log_from == 'partner'){
				var que = "SELECT t0ken FROM mb_client WHERE id=" + mysql.escape(to_id);
				var que_get_sinfo = "SELECT name, pic FROM mb_partner WHERE id=" + mysql.escape(from_id);
				callback_async(null, que, que_get_sinfo, 'P', callback_async);
			}
			else{
				callback_async({'response':"N",'type':"chat","err":'send//log_from is wrong.'}, null);
			}
		},
		function(que, que_get_sinfo, PorC, callback_async){ //select name  , pic 
			var query = connection.query(que_get_sinfo, function(err, rows){
				try{
					if(err){
						throw err;
					}
					else if(rows.length == 0){
						callback_async('response':"N",'type':"chat","err":" No result of client or partner name"}, null);
					}
					else{
						if(PorC == 'C'){
							sender_pic = "http://trost.co.kr/assets/img/of_partner/00000000.png";
						}
						else if(PorC =='P'){
							sender_pic = rows[0].pic;
						}
						else{
							callback_async({'response':"N",'type':"loadmsg","err":"Don't Know who you are"}, null);
						}
						sender_name = rows[0].name;
						callback_async(que, PorC, callback_async);
					}
				}
				catch (err){
					console.error(err);
					callback_async({'response':"N",'type':"chat","err":"send//log_from=client//DB Error"}, null);
				}
			});
		},	
		function(que, PorC, callback_async){ //select token
			var query = connection.query(que, function(err, rows){
				try{
					if(err){
						throw err;
					}
					else if(rows.length == 0){
						callback_async({'response':"N",'type':"chat","err":"send/no result of no on log_counseling"}, null);
					}
					else{
						var token = rows[0].token;
						var que_for_no = "SELECT no FROM log_counseling WHERE no_log="+mysql.escape(no_log)+" order by id desc limit 1";
						callback_async(null, que_for_no, callback_async);
					}
				}
				catch(err){
					console.error(err);
					callback_async({'response':"N",'type':"chat","err":"send/select token error"}, null);
				}
			});
		},
		function(que, callback_async){//select no 
			var query = connection.query(que, function(err, rows){
				try{
					if(err){
						throw err;
					}
					else if(rows.length){
						callback_async({'response':"N",'type':"chat","err":"send/no result of no on log_counseling"}, null);
					}
					else{
						data.no = rows[0].no;
						data.no++;
						var que_insert_lc = "INSERT INTO log_counseling set ?";
						callback_async(null, que_insert_lc, callback_async);
					}
				}
				catch(err){
					console.error(err);
					callback_async({'response':"N",'type':"chat","err":"send/select no error"}, null);
				}
			});
		},
		function(que, callback_async){ //insert 
			var query = connection.query(que, data, function(err, rows){
				try{
					if(err){
						throw err;
					}
					else{
						
						//request to GCM server for push
							
						request(
								{
								method:'POST',
								uri: 'https://gcm-http.googleapis.com/gcm/send',
								headers: {
								'Content-Type': 'application/json;charset=utf-8',
								'Authorization':'key=AIzaSyDYpkGz6fcmPbMzVtWSf-xWWGofQCxIfXA'
								//APIKEY
								},
								body:JSON.stringify({
								"registration_ids" : [token],
								"data" : {
										"log":msg,
										"log_from":log_from,
										"name":sender_name,
										"sender":from_id,
										"pic": sender_pic,
										"no_log":no_log,
										"time_message":time_msg,
										"no":data.no,
										"title":"Title",
										"sound":"default",
										"body":"새로운 메세지가 왔습니다.",
										"type":"chat"
								},
								"notification":{
										title:"Title",
										sound:"default",
										body:"새로운 메세지가 왔습니다.",
								},
								})
								}
								, function (error, response, body) {
									callback_async(null,{'response':"Y", 'no':data.no, 'time_message':time_msg,'no_log':no_log,'type':"chat"});
								}
						)
					}
				}
				catch(err){
					console.error(err);
					callback({'response':"N",'type':"chat","err":"send/insert log_counseling error"}, null);
									
				}
			});
		}
	],
	function(err, result){
		if(err){
			callback(err);
		}
		callback(result);
	}
)
*/
}

/********************************************************************************
load message 
parameter -> index(first time index is 0, and aften then index is 'no'),
			 no_log(chat room number), numOfMsg(the number of message)
it load message(numOfMsg) each event
********************************************************************************/
exports.loadmsg = function(index, no_log, numOfMsg, log_from, callback){
	console.log("/loadmsg -index:"+index+",no_log:"+no_log+",numOfmsg:"+numOfMsg+",log_from:"+log_from);
	var opponent_name="";
	var opponent_pic="";
	no_log = Number(no_log);
	numOfMsg = Number(numOfMsg);
	index = Number(index);
	
	if(index == 0){
		var que = "SELECT * FROM (SELECT no, time_message, log_from, log FROM log_counseling WHERE no_log = " + mysql.escape(no_log) +" ORDER BY no desc limit " + mysql.escape(index) +", " + mysql.escape(numOfMsg) +") t ORDER BY no asc";
	}
	else{
		var que = "SELECT * FROM (SELECT no, time_message, log_from, log FROM log_counseling WHERE no_log = " + mysql.escape(no_log) + " and no < " + mysql.escape(index) + " ORDER By no desc limit 0, " + mysql.escape(numOfMsg)+") t ORDER BY no asc";
	}
	var query = connection.query(que, function(err, rows){
		try{
			if(err){
				throw err;
			}
			else if(rows.length == 0){
				callback({'response':"N",'type':"loadmsg","err":"loadmsg/after check index No result on log_counseling"});
			}
			else{
				var msg = rows;
				try{
					if(log_from == 'client'){
						var que_get_id = "SELECT partner FROM counseling_log WHERE no=" + mysql.escape(no_log);
						var query_get_id = connection.query(que_get_id, function(err, rows){
							try{
								if(err){
									throw err;
								}
								else if(rows.length == 0){
									callback({'response':"N",'type':"loadmsg","err":"loadmsg/log_from=client => No result partner id"});
								}
								else{
									var id = rows[0].partner;
									var que_get_rinfo = "SELECT name, pic FROM mb_partner WHERE id=" + mysql.escape(id);
									var query_get_rinfo = connection.query(que_get_rinfo, function(err, rows){
										try{
											if(err){
												throw err;
											}
											else if(rows.length == 0){
												callback({'response':"N",'type':"loadmsg","err":"loadmsg/No result name and pic of partner"});
											}
											else{
												opponent_name = rows[0].name;
												opponent_pic = rows[0].pic;
												callback({'response':'Y',"msg":msg,'pic':opponent_pic,'name':opponent_name,"type":"loadmsg"});
											}
										}
										catch (err){
											console.error(err);
											callback({'response':"N",'type':"loadmsg","err":"loadmsg/select namd,pic of partner DB error"});
										}
									});
								}
							}
							catch (err){
								console.error(err);
								callback({'response':"N",'type':"loadmsg","err":"loadmsg/select partner id DB error"});
							}
						});
					}
					else if(log_from == 'partner'){
						var que_get_id = "SELECT client FROM counseling_log WHERE no=" + mysql.escape(no_log);
						var query_get_id = connection.query(que_get_id, function(err, rows){
							try{
								if(err){
									throw err;
								}
								else if(rows.length == 0){
									callback({'response':"N",'type':"loadmsg","err":"loadmsg/log_from=partner =>No result client id"});
								}
								else{
									var id = rows[0].client;
									var que_get_rinfo = "SELECT name FROM mb_client WHERE id=" + mysql.escape(id);
									var query_get_rinfo = connection.query(que_get_rinfo, function(err, rows){
										try{
											if(err){
												throw err;
											}
											else if(rows.length == 0){
												callback({'response':"N",'type':"loadmsg","err":"loadmsg/No result name of client"});
											}
											else{
												opponent_name = rows[0].name;
												opponent_pic = "http://trost.co.kr/assets/img/of_partner/00000000.png";
												callback({'response':"Y","msg":msg,'pic':opponent_pic,'name':opponent_name,"type":"loadmsg"});
											}
										}
										catch (err){
											console.error(err);
											callback({'response':"N",'type':"loadmsg","err":"loadmsg/select name of client DB error"});
										}
									});
								}
							}
							catch (err){
								console.error(err);
								callback({'response':"N",'type':"loadmsg","err":"loadmsg/select client id DB error"});
							}
						});
					}
					else{
						throw {'response':"N",'type':"loadmsg","err":"loadmsg/log_from is wrong."};
					}		
				}
				catch(err){
					callback(err);
				}	
			}
		}
		catch (err){
			console.error(err);
			callback({'response':"N",'type':"loadmsg","err":"select from counseling_log DB error"});
		}
	});

	/****************************************
			async
	*****************************************/ 
	/*
	async.waterfall(
		[
			function(callback_async){
				var query = connect.query(que, function(err, rows){ //que=>select * from subquery =>oldermsg
					try{
						if(err){
							throw err;
						}
						else if(rows.length == 0){
							var err_msg = {'response':"N",'type':"loadmsg","err":"loadmsg/after check index No result on log_counseling"};
							callback_async(err_msg,null);
						}
						else{
							var msg= rows;
							if(log_from == 'client'){
								var que_get_id = "SELECT partner FROM counseling_log WHERE no=" + mysql.escape(no_log);
								callback_async(null, msg, 'C', que_get_id);
							}
							else if(log_from == 'partner'){
								var que_get_id = "SELECT client FROM counseling_log WHERE no=" + mysql.escape(no_log);
								callback_async(null, msg, 'P', que_get_id);
							}	
							else{
								var err_msg = {'response':"N",'type':"loadmsg","err":"loadmsg/log_from is wrong."};
								callback_async(err_msg, null);
							}
						}
					}
					catch(err){
						console.error(err);
						callback({'response':"N",'type':"loadmsg","err":"select from counseling_log DB error"});
					}
				});
			},
			function(msg, PorC, que_get_id, callback_async){//que=>'Select partner or client From counseling_log where no d~!##@#@#'
				var query = connection.query(que_get_id, function(err,rows){
					try{
						if(err){
							throw err;
						}
						else if(rows.length == 0){
							callback({'response':"N",'type':"loadmsg","err":"loadmsg/log_from=client => No result partner id"});
						}
						else{
							if(PorC == 'C'){
								var id = rows[0].partner;
								var que_get_rinfo = "SELECT name, pic FROM mb_partner WHERE id=" + mysql.escape(id);
								callback_async(null, que_get_rinfo, PorC);
							}
							else if(PorC == 'P'){
								var id = rows.[0].client
								var que_get_rinfo = "SELECT name FROM mb_client WHERE id=" + mysql.escape(id);
								callback_async(null, que_get_rinfo, PorC);
							}
							else{
								var err_msg = {'response':"N",'type':"loadmsg","err":"Don't Know who you are"};
								callback_async(err_msg,null);
							}
						}
					}
					catch(err){
						console.error(err);
						callback({'response':"N",'type':"loadmsg","err":"loadmsg/select partner id DB error"});	
					}
				});
			},
			function(que_get_rinfo, PorC, callback_async){  //que=>'select name, pic'
				var query = connection.query(que_get_rinfo, function(err,rows){
					try{
						if(err){
							throw err;
						}
						else if(rows.length == 0){
							callback({'response':"N",'type':"loadmsg","err":"loadmsg/No result name and pic of partner"});
						}
						else{
							if(PorC = 'C'){
								opponent_pic = rows[0].pic;
							}
							else if(PorC = 'P'){
								opponent_pic = "http://trost.co.kr/assets/img/of_partner/00000000.png";
							}
							else{
								var err_msg = {'response':"N",'type':"loadmsg","err":"Don't Know who you are"};
								callback_async(err_msg,null);
							}
							opponent_name = rows[0].name;
							
							var resp = {'response':'Y',"msg":msg,'pic':opponent_pic,'name':opponent_name,"type":"loadmsg"};
							callback_async(null, resp);
						}
					}
					catch(err){
						console.error(err);
						callback({'response':"N",'type':"loadmsg","err":"loadmsg/select namd,pic of partner DB error"});				
					}
				});
			}
		],
		function(err, result){
			if(err){
				callback(err);
			}
			callback(result);
		}
	)

	*/
}

/********************************************************************************
makevideo
parameter -> no_log(text chat room number), no_room(facechat channel id),
			 to_id(receiver id), facetime_no(facetime index of DB-facetime_log)
first it check payment and write channel id on DB and push info to reciever
@sender must be partner
********************************************************************************/
exports.makevideo = function(no_log, no_room, to_id, facetime_no, callback){
	console.log("/makevideo -no_log:"+no_log+",no_room:"+no_room+",to_id:"+to_id+",facetime_no:"+facetime_no);
	var notification_body="화상채팅 알람";
	var que_up_ch = "UPDATE facetime_log SET channel_id=" +mysql.escape(no_room) + " WHERE no=" + mysql.escape(facetime_no);
	var query_up_ch = connection.query(que_up_ch, function(err, rows){	
		try{	
			if(err){
				throw err;
			}
			else{
				var que = "SELECT t0ken FROM mb_client WHERE id=" + mysql.escape(to_id);	
				var query = connection.query(que, function(err, rows){
					try{
						if(err){
							throw err;
						}
						else if(rows.length == 0){
							callback({'response':"N", 'type':"makevideo","err":"makevideo/No result of token"})
						}
						else{
							var token = rows[0].t0ken;
							//request to GCM server for push
							request(
								{ 
									method: 'POST', 
									uri: 'https://gcm-http.googleapis.com/gcm/send',
									headers: {
										'Content-Type': 'application/json;charset=utf-8',
										'Authorization':'key=AIzaSyDYpkGz6fcmPbMzVtWSf-xWWGofQCxIfXA'  
										//APIKEY
										},
									body: JSON.stringify({
										"registration_ids" : [token],
										"data" : {
										"no_room":no_room,
										"no_log":no_log,
										"title":"Title",
										"sound":"default",
										"body":"상담사에게 화상 상담 신청 알람이 왔습니다",
										"type":"makevideo"
										},
										"notification":{
											title:"Title",
											sound:"default",
											body:"상담사에게 화상 상담 신청 알람이 왔습니다",
										},
									})
								}
								, function (error, response, body) {
									callback({'response':"Y",'no_room':no_room, 'no_log':no_log,'type':"makevideo"});
								}
							)
						}
					}	
					catch (err){
						console.error(err);
						callback({'response':"N",'type':"makevideo","err":"makevideo/select token  DB error"});
					}
				});
			}
		}	
		catch (err){
			console.error(err);
			callback({'response':"N", 'type':"makevideo","err":"makevideo/update db error"});
		}
	});

/********************
 * async *
 * ********************/
 /*
 	async.waterfall(
	[
		function(callback_async){//update
			var query = connection.query(que_up_ch, function(err, rows){
				try{
					if(err){
						throw err;
					}
					else{
						var que = "SELECT t0ken FROM mb_client WHERE id=" + mysql.escape(to_id);
						callback_async(null, que, callback_async);
					}
				}
				catch(err){
					console.error(err);
					callback({'response':"N", 'type':"makevideo","err":"makevideo/update db error"}, null);
				}
			});
		},
		function(que, callback_async){//select token
			var query = connection.query(que, function(err,rows){
				try{
					if(err){
						throw err;
					}
					else if(rows.length == 0){
						callback_async({'response':"N", 'type':"makevideo","err":"makevideo/No result of token"}, null);
					}
					else{
						var token = rows[0].t0ken;
						//request to GCM server for push
						request(
							{ 
								method: 'POST', 
								uri: 'https://gcm-http.googleapis.com/gcm/send',
								headers: {
									'Content-Type': 'application/json;charset=utf-8',
									'Authorization':'key=AIzaSyDYpkGz6fcmPbMzVtWSf-xWWGofQCxIfXA'  
									//APIKEY
									},
								body: JSON.stringify({
									"registration_ids" : [token],
									"data" : {
									"no_room":no_room,
									"no_log":no_log,
									"title":"Title",
									"sound":"default",
									"body":"상담사에게 화상 상담 신청 알람이 왔습니다",
									"type":"makevideo"
									},
									"notification":{
										title:"Title",
										sound:"default",
										body:"상담사에게 화상 상담 신청 알람이 왔습니다",
									},
								})
							}
							, function (error, response, body) {
								callback({'response':"Y",'no_room':no_room, 'no_log':no_log,'type':"makevideo"});
							}
						)				
					}
				}
				catch(err){
					console.error(err);
					callback_async({'response':"N",'type':"makevideo","err":"makevideo/select token  DB error"}, null);
				}
			});
		}
	],
	function(err, result){
		if(err){
			callback(err);
		}
		callback(result);
	}
)
*/
}

/********************************************************************************
responsemsg
parameter -> no_log(text chat room number), no(index of text chat),
			 status(sender's status client or partner)
response text to receiver
********************************************************************************/
exports.responseMsg = function(no_log, no, status, callback){
	var index = no++;
	//get rows -> where log_from= client =>receiver=partner, where log_from=partner =>receiver=client
	var que = "SELECT log FRoM log_counseling WHERE log_from=" + mysql.escape(status) + ", no_log=" + mysql.escape(status) + ", no=" + mysql.escape(no);
	var query  = connection.query(que, function(err, rows){
		try{
			if(err){
				callback({'response':"N",'type':"responseMsg","err":"responseMsg/Db select err"});
			}
			else if(rows.length == 0){
				callback({'response':"N",'type':"responseMsg","err":"responseMsg/no result "});
			}
			else{
				var msg = rows[0].log;
				callback({'response':"Y",'msg':msg,'type':"responseMsg"});
			}
		}
		catch{
			console.error(err);
			callback({'response':"N",'type':"responseMsg","err":"responseMsg/select log DB error"});
				
		}
	});
}

/********************************************************************************
makechat
parameter -> no_log(text chat room number), no_room(facechat channel id),
			 to_id(receiver id), facetime_no(facetime index of DB-facetime_log)
first it check payment and write channel id on DB and push info to reciever
@sender must be partner
********************************************************************************/
exports.makechat = function(time_start, partner, client, callback){
	var data = {
				time_start : time_start,
				partner : partner,
				client : client
	};

	var que = "INSERT INTO counseling_log SET ?";
	var query = connection.query(que, data, function(err, rows){
		try{
			if(err){
				throw err;
			}
			else{
				var que_get_no = "SELECT no FROM counseling_log WHERE time_start="+mysql.escape(time_start)+" and partner="+mysql.escape(partner)+" and client="+mysql.escape(client);
	          	var query_get_no = connection.query(que_get_no, function(err, rows){
	          		try{
	          			if(err){
	          				throw err;
	          			}
	          			else if(rows.length == 0){
	          				callback({'response':"N",'type':"makechat","err":"No Result no on DB"});
	          			}
	          			else{
	          				var no_log = rows[0].no;
	          				var que_get_tok = "SELECT token FROM mb_partner WHERE id="+mysql.escape(partner);
	          				var query_get_tok = connection.query(que_get_tok, function(err, rows) {
	          					try{
	          						if(err){
	          							throw err;
	          						}
	          						else if(rows.length == 0){
	          							callback({'response':"N",'type':"makechat","err":"No Result token"});
	          						}
	          						else{
	          							var token = rows[0].token;
	          							request(
							                    { 
							                      method: 'POST', 
							                      uri: 'https://gcm-http.googleapis.com/gcm/send',
							                      headers: {
							                                'Content-Type': 'application/json;charset=utf-8',
							                                'Authorization':'key=AIzaSyDYpkGz6fcmPbMzVtWSf-xWWGofQCxIfXA'  
							                                //APIKEY
							                                },
							                      body: JSON.stringify({
							                      "registration_ids" : [token],
							                      "data" : {
							                                "no_log":no_log,
							                                "partner":client,
							                                "type":"makevideo"
							                      },
							                      //"time_to_live": 108
							                      })
							                    }
							                    , function (error, response, body) {
							                        callback({'no_log':no_log, 'partner':partner,'type':"makevideo"});
							                    }
							            )
	          						}
	          					}
	          					catch (err){
	          						callback({'response':"N",'type':"makechat","err":"DB error"});
	          					}
	          				});	
	          			}
	          		}
	          		catch (err){
	          			console.error(err);
	          			callback({'response':"N",'type':"makechat","err":"DB error"});
	          		}
	          	});
          }
		}
		catch (err){
			console.error(err);
			callback({'response':"N",'type':"makechat","err":"DB insert Error"});
		}
	});
	/****************************************
			async
	*****************************************/ 
/*
	async.waterfall(
	[
		function(callback_async){
			var query = connection.query(que, data, function(err, rows){
				try{
					if(err){
						throw err;
					}
					else{
						var que_get_no = "SELECT no FROM counseling_log WHERE time_start="+mysql.escape(time_start)+" and partner="+mysql.escape(partner)+" and client="+mysql.escape(client);
						callback_async(null, que_get_no, callback_async);
					}
				}	
				catch(err){
					console.error(err);
					callback_async({'response':"N",'type':"makechat","err":"makechat/insert DB error"}, null);
				}
			});
		},
		function(que_get_no, callback_async){
			var query = connection.query(que_get_no, function(err, rows){
				try{
					if(err){
						throw err;
					}
					else if(rows.length == 0){
						callback_async({'response':"N", 'type':"makechat","err":"makechat/No result of no"}, null);	
					}
					else{
						var no_log = rows[0].no;
						var que_get_tok = "SELECT token FROM mb_partner WHERE id="+mysql.escape(partner);
						callback_async(null, que_get_tok, callback_async);
					}
				}
				catch(err){
					console.error(err);
					callback_async({'response':"N",'type':"makechat","err":"makechat/select no  DB error"}, null);
				}
			});
		},
		function(que_get_tok, callback_async){
			var query = connection.query(que_get_tok, function(err, rows){
				try{
					if(err){
						throw err;
					}
					else if(rows.length == 0){
						callback_async({'response':"N", 'type':"makechat","err":"makechat/No result of token"}, null);	
					}
					else{
						var token = rows[0].token;
						request(
							{ 
								method: 'POST', 
								uri: 'https://gcm-http.googleapis.com/gcm/send',
								headers: {
									'Content-Type': 'application/json;charset=utf-8',
									'Authorization':'key=AIzaSyDYpkGz6fcmPbMzVtWSf-xWWGofQCxIfXA'  
									//APIKEY
									},
								body: JSON.stringify({
									"registration_ids" : [token],
									"data" : {
										"no_log":no_log,
										"partner":client,
										"type":"makevideo"
									},
								})
							}
							, function (error, response, body) {
								callback({'no_log':no_log, 'partner':partner,'type':"makevideo"});
							}
						)						
					}
				}	
				catch(err){
					console.error(err);
					callback_async({'response':"N",'type':"makechat","err":"makechat/select token  DB error"}, null);
				}
			});
		}
	],
	function(err, result){
		if(err){
			callback(err);
		}
		callback(result);
	}	
)

*/
}

/********************************************************************************
getAlamInfo
parameter -> only callback
If server is started, first this function run 
=>assign alam Job schedule
********************************************************************************/
exports.getAlamInfo = function(callback){
	var que = "SELECT date, client FROM facetimeAlam WHERE AlamSent ='N'";//if alam wan't sent select date and to_id
	var query = connection.query(que, function(err, rows){
		try{
			if(err){
				throw err;
			}
			else if(rows.length == 0){
				callback('No Data of Video Alam');
			}
			else{

				for(var i = 0;i<rows.length;i++){
					schedule.scheduleJob( rows[i].id, rows[i].date ,function(){
					 	var que_get_tok = "SELECT t0ken FROM mb_client WHERE id=" + mysql.escape(rows[0].id);
					 	var query_get_tok = connection(que_get_tok, function(err, rows){
					 		try{
					 			if(err){
					 				throw err;
					 			}
					 			else if(rows.length == 0){
					 				callback('No Result of token');
					 			}
					 			else{
					 				var token = rows[0].token;
					 				request(
										{
										method:'POST',
										uri: 'https://gcm-http.googleapis.com/gcm/send',
										headers: {
										'Content-Type': 'application/json;charset=utf-8',
										'Authorization':'key=AIzaSyDYpkGz6fcmPbMzVtWSf-xWWGofQCxIfXA'
										//APIKEY
										},
										body:JSON.stringify({
										"registration_ids" : [token],
										"data" : {
												"title":"Title",
												"sound":"default",
												"body":"화상 상담 예약 알람.",
												"type":"chat"
										},
										"notification":{
												title:"Title",
												sound:"default",
												body:"화상 상담 예약 알람.",
										},
										})
										}
										, function (error, response, body) { 
											console.log("error : " + error + "response : " + response + " body : " + body);
											//callback({'response':"Y",'type':"chat"});
										}
									)			
					 			}
					 		}
					 		catch(err){
					 			callback('DB error getting token');
					 		}
					 	});
		
					}.bind(null));
				}	
			} 
		}
		catch(err){
			callback('DB error while Select video alam data');
		}
	});
	/****************************************
			async
	*****************************************/ 
	/*
	async.waterfall(
		[
			function(callback_async){
				var query = connect.query(que, function(err, rows){ 
					try{
						if(err){
							throw err;
						}
						else if(rows.length == 0){
							callback_async({'response':"N",'err':"no result of alam info"},null);
						}
						else{

							for(var i = 0;i<rows.length;i++){
								schedule.scheduleJob( rows[i].id, rows[i].date ,function(){
								 	var que_get_tok = "SELECT t0ken FROM mb_client WHERE id=" + mysql.escape(rows[0].id);
								 	callback_async(null, que_get_tok);
					
								}.bind(null));
							}	
						}
					}
					catch(err){
						console.error(err);
						callback({'response':"N","err":"select alam info DB error"});
					}
				});
			},
			function(que_get_tok, callback_async){
			 	var query_get_tok = connection(que_get_tok, function(err, rows){
			 		try{
			 			if(err){
			 				throw err;
			 			}
			 			else if(rows.length == 0){
			 				callback('No Result of token');
			 			}
			 			else{
			 				var token = rows[0].token;
			 				request(
								{
								method:'POST',
								uri: 'https://gcm-http.googleapis.com/gcm/send',
								headers: {
								'Content-Type': 'application/json;charset=utf-8',
								'Authorization':'key=AIzaSyDYpkGz6fcmPbMzVtWSf-xWWGofQCxIfXA'
								//APIKEY
								},
								body:JSON.stringify({
								"registration_ids" : [token],
								"data" : {
										"title":"title",
										"sound":"default",
										"body":"화상 상담 예약 알람.",
										"type":"chat"
								},
								"notification":{
										title:"title",
										sound:"default",
										body:"화상 상담 예약 알람.",
								},
								})
								}
								, function (error, response, body) { 
									console.log("error : " + error + "response : " + response + " body : " + body);
									callback_async(null,{'response':"Y",'type':"chat"});
								}
							)			
			 			}
			 		}
			 		catch(err){
			 			callback_async({'err':'DB error getting token'},null);
			 		}
			 	});
			}
		],
		function(err, result){
			if(err){
				callback(err);
			}
			callback(result);
		}
	)
	*/
}
/********************************************************************************
pushAlam
parameter -> client(client id) ,date( new Date(year,month,day,hour,minute))
It assign Schedule using node-schedule
********************************************************************************/
exports.pushAlam = function(client, date, callback){
	var scheduled = schedule.scheduledJobs;
	var que = "SELECT t0ken FROM mb_client WHERE id=" + mysql.escape(client);
	var query = connection.query(que, function(err, rows){
		try{
			if(err){
				throw err;
			}
			else if(rows.length == 0){
				callback({'response':"N",'err':'No result of token'});
			}
			else{
				var token = rows[0].t0ken;
				if(scheduled[client]!=null){ //if already server have schedule
					scheduled[client].cancel();
					delete scheduled[client];
					pushAlam(token,client,date,scheduled);
				}
				else{
					pushAlam(token,client,date,scheduled);	
				}
			}
		}
		catch(err){
			callback({'response':'N','err':"DB error"});
		}
	});
}
/*
	function for push Alam
*/
function pushAlam(token, id, date, scheduled){
	schedule.scheduleJob(id, date, function(){
		request(
			{
			method:'POST',
			uri: 'https://gcm-http.googleapis.com/gcm/send',
			headers: {
			'Content-Type': 'application/json;charset=utf-8',
			'Authorization':'key=AIzaSyDYpkGz6fcmPbMzVtWSf-xWWGofQCxIfXA'
			//APIKEY
			},
			body:JSON.stringify({
			"registration_ids" : [token],
			"data" : {
					"title":"title",
					"sound":"default",
					"body":"화상 상담 예약 알람.",
					"type":"chat"
			},
			"notification":{
					title:"Title",
					sound:"default",
					body:"화상 상담 예약 알람.",
			},
			})
			}
			, function (error, response, body) { 
				console.log("error : " + error + "response : " + response + " body : " + body);
				//callback({'response':"Y",'type':"chat"});
			}
		)
		delete scheduled[id];
	}.bind(null));	
}


