var request =  require('request');
var mysql = require('mysql');
//DB connection
var connection = mysql.createConnection(
    {
      host     : 'localhost',
      user     : 'root',
      password : '1234',
      database : 'node_test'
    }
);
connection.connect(function{
	try{
		if(err){
			throw err;
		}
	}
	catch (err){
		console.error(err);
	}
});
/********************************************************************************
send message 
parameter -> no_log(index of chat room), time_msg(timestamp when messege sent), 
			 log_from(sender - partner of client), msg(message text), 
			 to_id(receiver's id), device
after write DB, send data to GCM server using json and post method
********************************************************************************/
exports.send = function(no_log, log_from, msg, to_id, time_msg, device, callback){
	//object for query set
	var data = {
                no_log : no_log,
                no : "",
                log : msg,
                time_message : time_msg,
                log_from : log_from,
                device : device
	};

	try{
		/*
			check log_from whether client or partner or not(err)
			and DB connection
		*/
		if(log_from == 'client'){
			var que = "SELECT token FROM mb_partner WHERE id=" + mysql.escape(to_id);
		}
		else if(log_from == 'partner'){
			var que = "SELECT token FROM mb_client WHERE id=" + mysql.escape(to_id);
		}
		else {
			throw {'response':"N",'type':"N","err":'"log_from" is wrong.'};
		}

		var query = connection.query(que, function(err, rows){
			try{
				if(err){
					throw err;
				}
				else if(rows.length == 0){
					callback({'response':"N", 'type':"chat","err":"rowslength error"});
				}
				else{
					//get token value
					var token = rows[0].token;
					//get no from DB
					var que_for_no = "SELECT no FROM log_counseling WHERE no_log="+mysql.escape(no_log)+" order by id desc limit 1";
	          		var query_for_no = connection.query(que_for_no, function(err, rows){
	          			try{
	          				if(err){
	          					throw err;
	          				}	

	          				data.no = Number(1);
	          				if(rows.length != 0){
	          					data.no = rows[0].no;
	          					data.no++;
	          				}
	          				/*
	          					write data set on DB(log_counseling)
	          				*/
	          				var que_insert_lc = "INSERT INTO log_counseling set ?";
	          				var query_insert_lc = connection.query(que_insert_lc, data, function(err, rows){

	          					try{
	          						if(err){
	          							throw err;
	          						}
	          						/*
										request to GCM server for push
	          						*/	
	          						request(
	          								{
	          								method:'POST',
	          								uri: 'https://gcm-http.googleapis.com/gcm/send',
											headers: {
	                                        'Content-Type': 'application/json;charset=utf-8',
	                                        'Authorization':'key=AIzaSyDYpkGz6fcmPbMzVtWSf-xWWGofQCxIfXA'
	                              			//APIKEY
	          								},
	          								body:JSON.stringify({
	                                		"registration_ids" : [token],
	                                		"data" : {
			                                        "log":msg,
			                                        "log_from":log_from,
			                                        "to_id":to_id,
			                                        "no_log":no_log,
			                                        "time_message":time_msg,
			                                        "no":data.no,
			                                        "type":"chat"
	                                        },
	                                		"notification":{
	                                				title:"트로스트",
	                                				sound:"default",
	                                				body:msg,
	                                		},
	                              			})
	          								}
	          								, function (error, response, body) {
	                              				callback({'response':"Y", 'no':data.no, 'time_message':time_msg,'no_log':no_log,'type':"chat"});
	                              			}
	          							)
	          					}
	          					catch (err){
									console.error(err);
									callback({'response':"N",'type':"chat","err":"db Insert error"});
	          					}
	          				});
	          			}
	          			catch (err){
	          				console.error(err);
	          				callback({'response':"N",'type':"chat","err":"select no error"});
	          			}
	          		});	
				}
			}
			catch (err){
				console.error(err);
				callback({'response':"N",'type':"chat","err":"select token error"})
			}
		});
	}
	catch(err){
		callback(err);
	}
}
/********************************************************************************
load message 
parameter -> index(first time index is 0, and aften then index is 'no'),
			 no_log(chat room number), numOfMsg(the number of message)
it load message(numOfMsg) each event
********************************************************************************/
exports.loadmsg = function(index, no_log, numOfMsg, callback){
	
	//change type 
	no_log = Number(no_log);
	numOfMsg = Number(numOfMsg);
	index = Number(index);
	if(index == 0){
		//first time
		var que = "SELECT * FROM (SELECT no, time_message, log_from, log FROM log_counseling WHERE no_log = " + mysql.escape(no_log) +" ORDER BY no desc limit " + mysql.escape(index) +", " + mysql.escape(numOfMsg) +") t ORDER BY no asc";
	}
	else{
		var que = "SELECT * FROM (SELECT no, time_message, log_from, log FROM log_counseling WHERE no_log = " + mysql.escape(no_log) + " and no < " + mysql.escape(index) + " ORDER By no desc limit 0, " + mysql.escape(numOfMsg)+") t ORDER BY no asc";
	}
	var query = connection.query(que, function(err, rows){
		
		try{
			if(err){
				throw err;
			}
			else if(rows.length == 0){
				callback({'response':"N"});
			}
			else{
				callback({"msg":rows,"type":"loadmsg"});
			}
		}
		catch (err){
			console.error(err);
			callback({'response':"N",'type':"loadmsg","err":"select error"});
		}
	});
	
}
/********************************************************************************
makevideo
parameter -> no_log(text chat room number), no_room(facechat channel id),
			 to_id(receiver id), facetime_no(facetime index of DB-facetime_log)
first it check payment and write channel id on DB and push info to reciever
@sender must be partner
********************************************************************************/
exports.makevideo = function(no_log, no_room, to_id, facetime_no, callback){

	var que_chk_pay = "SELECT payment FROM facetime_log WHERE texttime_no=" + mysql.escape(no_log) + " and facetime_no=" + mysql.escape(facetime_no);
 	var query_chk_pay = connection.query(que_chk_pay, function(err, rows){
 		try{	
 			if(err){
 				throw err;
 			}
 			else if(rows.length == 0){
 				callback({'response':"N",'type':"makevideo","err":"rowslength error"});
 			}
 			else if(rows[0].payment == "Y"){
 				var que_up_ch = "UPDATE facetime_log SET channel_id=" +mysql.escape(no_room) + " WHERE texttime_no=" = mysql.escape(no_log);
      			var query_insert_ch = connection.query(que_insert_ch, function(err, rows){	
      				try{	
      					if(err){
      						throw err;
      					}
      					else{
      						var que = "SELECT token FROM mb_client WHERE id=" + mysql.escape(to_id);	
      						var query = connection.query(que, function(err, rows){
      							try{
      								if(err){
      									throw err;
      								}
      								else if(rows.length == 0){
      									callback({'response':"N", 'type':"makevideo","err":"No result "})
      								}
      								else{
      									var token = rows[0].token;
	          						/*
										request to GCM server for push
	          						*/	
						              request(
						                    { 
						                      method: 'POST', 
						                      uri: 'https://gcm-http.googleapis.com/gcm/send',
						                      headers: {
						                                'Content-Type': 'application/json;charset=utf-8',
						                                'Authorization':'key=AIzaSyDYpkGz6fcmPbMzVtWSf-xWWGofQCxIfXA'  
						                                //APIKEY
						                                },
						                      body: JSON.stringify({
						                      "registration_ids" : [token],
						                      "data" : {
						                                "no_room":no_room,
						                                "no_log":no_log,
						                                "type":"makevideo"
						                      },
						                      //"time_to_live": 108
						                      })
						                    }
						                    , function (error, response, body) {
						                        callback({'no_room':no_room, 'no_log':no_log,'type':"makevideo"});
						                    }
						              )
      								}
      							}	
      							catch{
      								console.error(err);
      								callback({'response':"N",'type':"makevideo","err":"select token error"});
      							}
      						});
      					}
      				}	
      				catch (err){
      					console.error(err);
      					callback({'response':"N", 'type':"makevideo","err":"update db error"});
      				}
      			});
 			}
 			else if(rows[0].payment == "N"){
 				callback({'response':"N",'type':"makevideo","err":"payment is N"});
 			}
 			else{
 				throw {'response':"N",'type':"makevideo","err":"payment is wrong value"};
 			}
 		}
 		catch (err){
 			console.error(err);
 			callback({'response':"N",'type':"makevideo","err":"select error"});
 		}
 	}
}
/********************************************************************************
makechat
parameter -> no_log(text chat room number), no_room(facechat channel id),
			 to_id(receiver id), facetime_no(facetime index of DB-facetime_log)
first it check payment and write channel id on DB and push info to reciever
@sender must be partner
********************************************************************************/
exports.makechat = function(time_start, partner, client, callback){
	var data = {
				time_start : time_start,
				partner : partner,
				client : client
	};

	var que = "INSERT INTO counseling_log SET ?";
	var query = connection.query(que, data, function(err, rows){
		try{
			if(err){
				throw err;
			}
			else{
				var que_get_no = "SELECT no FROM counseling_log WHERE time_start="+mysql.escape(time_start)+" and partner="+mysql.escape(partner)+" and client="+mysql.escape(client);
	          	var query_get_no = connection.query(que_get_no, function(err, rows){
	          		try{
	          			if(err){
	          				throw err;
	          			}
	          			else if(rows.length == 0){
	          				callback({'response':"N",'type':"makechat","err":"No Result no on DB"});
	          			}
	          			else{
	          				var no_log = rows[0].no;
	          				var que_get_tok = "SELECT token FROM mb_partner WHERE id="+mysql.escape(partner);
	          				var query_get_tok = connection.query(que_get_tok, function(err, rows) {
	          					try{
	          						if(err){
	          							throw err;
	          						}
	          						else if(rows.length == 0){
	          							callback({'response':"N",'type':"makechat","err":"No Result token"});
	          						}
	          						else{
	          							var token = rows[0].token;
	          							request(
							                    { 
							                      method: 'POST', 
							                      uri: 'https://gcm-http.googleapis.com/gcm/send',
							                      headers: {
							                                'Content-Type': 'application/json;charset=utf-8',
							                                'Authorization':'key=AIzaSyDYpkGz6fcmPbMzVtWSf-xWWGofQCxIfXA'  
							                                //APIKEY
							                                },
							                      body: JSON.stringify({
							                      "registration_ids" : [token],
							                      "data" : {
							                                "no_log":no_log,
							                                "partner":client,
							                                "type":"makevideo"
							                      },
							                      //"time_to_live": 108
							                      })
							                    }
							                    , function (error, response, body) {
							                        callback({'no_log':no_log, 'partner':partner,'type':"makevideo"});
							                    }
							            )
	          						}
	          					}
	          					catch (err){
	          						callback({'response':"N",'type':"makechat","err":"DB error"});
	          					}
	          				});	
	          			}
	          		}
	          		catch (err){
	          			console.error(err);
	          			callback({'response':"N",'type':"makechat","err":"DB error"});
	          		}
	          	});
          }
		}
		catch (err){
			console.error(err);
			callback({'response':"N",'type':"makechat","err":"DB insert Error"});
		}
	});
}
